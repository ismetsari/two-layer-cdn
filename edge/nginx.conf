worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict ip_status 10m;

    init_by_lua_block {
        -- Constants
        local status_dict = ngx.shared.ip_status
        status_dict:flush_all()
    }

    # Caching path
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=edge_cache:10m max_size=100m inactive=1m use_temp_path=off;

    server {
        listen 80;

        access_by_lua_block {
            local status_dict = ngx.shared.ip_status
            local ip = ngx.var.binary_remote_addr
            local now = ngx.now()

            -- Log each request
            ngx.log(ngx.INFO, "Processing request from IP: ", ip)

            -- Check if IP is blocked
            local block_until = status_dict:get(ip .. ":blocked")
            if block_until and now < block_until then
                ngx.log(ngx.ERR, "IP blocked: ", ip)
                return ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            -- Check request count for 1 second window
            local count_200 = status_dict:incr(ip .. ":200", 1, 0, 1)
            ngx.log(ngx.INFO, "Request count for IP ", ip, ": ", count_200)
            if count_200 > 200 then
                ngx.log(ngx.WARN, "Rate limit exceeded for IP: ", ip)
                -- Move to reduced rate
                status_dict:set(ip .. ":mode", "reduced", 60)  -- lasts 60 sec
            end

            -- If in reduced mode, check 50 r/s
            local mode = status_dict:get(ip .. ":mode")
            if mode == "reduced" then
                local count_50 = status_dict:incr(ip .. ":50", 1, 0, 1)
                ngx.log(ngx.INFO, "Reduced mode request count for IP ", ip, ": ", count_50)
                if count_50 > 50 then
                    ngx.log(ngx.ERR, "IP blocked due to repeated violations: ", ip)
                    -- Block IP for 10 minutes
                    status_dict:set(ip .. ":blocked", now + 600)
                    return ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            end
        }

        location ~* \.css$ {
            proxy_pass http://mcache:80;
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }

        location ~* \.png$ {
            proxy_pass http://origin:80;
            proxy_cache edge_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_min_uses 3;
            add_header X-Edge-Cache $upstream_cache_status;
        }

        location / {
            proxy_pass http://mcache:80;
            proxy_cache edge_cache;
            proxy_cache_valid 200 2m;
            add_header X-Edge-Cache $upstream_cache_status;
        }
    }
}
